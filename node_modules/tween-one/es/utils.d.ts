import { IAnimObject, IProps, IObject } from './typings';
export declare function noop(): void;
export declare const colorRegExp: any;
export declare const shadowExp: RegExp;
export declare const windowIsUndefined: boolean;
export declare const getTime: () => number;
export declare function parsePath(path: any): any;
export declare const initAnimProps: IAnimObject;
export declare const initProps: IProps;
export declare const getInitProps: (props: any) => any;
export declare const dataToArray: (d: any) => any;
export declare const flatArray: <T>(d: any) => T | T[];
export declare const getAnimatePos: (animate: IAnimObject, { appearTo, delay, duration, repeat, repeatDelay }: IAnimObject) => number;
export declare const getDefaultStart: (key: string) => 1 | 0;
export declare const getStartAtValue: (start: string | number, startAt: {
    vars: number;
    count: string;
    unit: string;
}) => any;
export declare const getValue: (startVars: number, endVars: number, ratio: number, count?: string, unit?: any) => any;
export declare const getComputedStyle: (target: any) => any;
export declare const styleValueToArray: IObject;
export declare function startConvertToEndUnit({ target, computedStyle, style, value, startUnit, endUnit, fixed, isOriginWidth, useCurrentTarget, }: {
    target?: any;
    useCurrentTarget?: boolean;
    computedStyle?: IObject;
    style?: any;
    value?: any;
    startUnit?: string;
    endUnit?: string;
    fixed?: boolean;
    isOriginWidth?: any;
}): any;
export declare function getTransformValue(t: string | IObject): string;
export declare const initFilterValue: IObject;
