import _typeof from "@babel/runtime/helpers/esm/typeof";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import { interpolate } from 'flubber';
import PluginMixins from './PluginMixins';

var SvgMorph = /*#__PURE__*/function (_PluginMixins) {
  _inherits(SvgMorph, _PluginMixins);

  var _super = _createSuper(SvgMorph);

  function SvgMorph(value, _key) {
    var _this;

    _classCallCheck(this, SvgMorph);

    _this = _super.call(this, value, _key);
    _this.value = void 0;
    _this.key = void 0;
    _this.start = '';
    _this.vars = {};
    _this.attr = void 0;
    _this.maxSegmentLength = void 0;
    _this.toPath = void 0;
    _this.interpolator = void 0;
    _this.pointsArray = void 0;

    _this.getPointVars = function (d) {
      if (Array.isArray(d)) {
        return d;
      }

      return d.replace(/\,\s+/g, ',').split(/\s+/).map(function (item) {
        return item.split(',').map(function (_item) {
          return parseFloat(_item.replace(/[a-z]/gi, ''));
        });
      });
    };

    _this.polygonPoints = function (start, end) {
      var startArray = _this.getPointVars(start);

      var endArray = _this.getPointVars(end);

      if (startArray.length !== endArray.length) {
        var t = startArray.length > endArray.length;
        var long = t ? startArray : endArray;
        var short = long === startArray ? endArray : startArray;

        for (var i = short.length; i < long.length; i++) {
          short[i] = short[short.length - 1];
        }

        return t ? [long, short] : [short, long];
      }

      return [startArray, endArray];
    };

    _this.getAnimStart = function () {
      var _assertThisInitialize = _assertThisInitialized(_this),
          target = _assertThisInitialize.target,
          _assertThisInitialize2 = _assertThisInitialize.startAt,
          startAt = _assertThisInitialize2 === void 0 ? {} : _assertThisInitialize2,
          key = _assertThisInitialize.key;

      var tagName = target.tagName;

      if (startAt[key]) {
        if (_typeof(startAt[key]) === 'object') {
          _this.attr = startAt[key].attr || _this.attr;
          _this.start = startAt[key].path;
          _this.maxSegmentLength = startAt[key].maxSegmentLength;
        } else if (typeof startAt[key] === 'string') {
          _this.start = startAt[key];
        }
      } // svg 标签强制 attr 为标签的 attr;


      _this.attr = tagName === 'polygon' ? 'points' : _this.attr;
      _this.attr = tagName === 'path' ? 'd' : _this.attr;
      _this.start = _this.start || (target.getAttribute ? target.getAttribute(_this.attr) : target[_this.attr]);
      _this.start = _this.start || 'M0,0Z';

      if (tagName === 'polygon' || _this.attr === 'points') {
        _this.pointsArray = _this.polygonPoints(_this.start, _this.toPath);
      } else {
        _this.interpolator = interpolate(_this.start, _this.toPath, {
          maxSegmentLength: _this.maxSegmentLength
        });
      }

      return _this.start;
    };

    _this.setArrayRatio = function (ratio, start, item, i) {
      if (typeof item === 'string') {
        return item;
      }

      var startData = start[i];
      return (item - startData) * ratio + startData;
    };

    _this.render = function (r) {
      var _assertThisInitialize3 = _assertThisInitialized(_this),
          target = _assertThisInitialize3.target;

      var tagName = target.tagName;
      var s;

      if (tagName === 'polygon' || _this.attr === 'points') {
        var start = _this.pointsArray[0];
        s = _this.pointsArray[1].map(function (item, i) {
          return item.map(function (c, ci) {
            return _this.setArrayRatio(r, start[i], c, ci);
          }).join(', ');
        }).join(' ');
      } else {
        s = _this.interpolator(r);
      }

      return {
        path: s,
        attr: _this.attr
      };
    };

    _this.value = value;
    _this.key = _key;
    _this.attr = value.attr || '';
    _this.toPath = value.path;
    _this.maxSegmentLength = typeof value.maxSegmentLength === 'undefined' ? 0.5 : value.maxSegmentLength;
    return _this;
  }

  return _createClass(SvgMorph);
}(PluginMixins);

SvgMorph.key = 'setAttribute';
SvgMorph.className = 'SVGMorph';
export { SvgMorph as default };