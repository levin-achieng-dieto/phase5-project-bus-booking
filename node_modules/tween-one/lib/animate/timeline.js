"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _ticker = _interopRequireDefault(require("./ticker"));

var Timeline = /*#__PURE__*/function () {
  function Timeline() {
    var _this = this;

    (0, _classCallCheck2.default)(this, Timeline);
    this.children = [];
    this.autoSleep = 200;
    this.tickerKey = void 0;
    this.startTime = void 0;

    this.addChild = function (animate) {
      if (_this.children.indexOf(animate) === -1) {
        // this.children = this.children.filter(c => c !== animate);
        _this.children.push(animate);

        _this.updateTickerState();
      } else {
        _this.start();
      }
    };

    this.removeChild = function (animate) {
      _this.children = _this.children.filter(function (c) {
        return c !== animate;
      });

      _this.updateTickerState();
    };

    this.kill = function (targets) {
      _this.children = _this.children.filter(function (c) {
        var currentTargets = c.root.targets;
        var newTargets = currentTargets.map(function (d, i) {
          if (targets.indexOf(d) === -1) {
            return d;
          } // c.root.vars = c.root.vars.filter((_: any, j: number) => j !== i);


          delete d._tweenOneVars;
          return;
        });
        c.root.targets = newTargets;
        var v = !!newTargets.filter(function (a) {
          return a;
        }).length;

        if (!v) {
          c.kill();
        }

        return v;
      });

      _this.updateTickerState();
    };

    this.killAll = function (clearChild) {
      if (clearChild) {
        _this.children.forEach(function (c) {
          c === null || c === void 0 ? void 0 : c.root.targets.forEach(function (d) {
            if (!d) {
              return;
            }

            delete d._tweenOneVars;
          });
        });

        _this.children = [];
      }

      _ticker.default.clear(_this.tickerKey);

      _this.tickerKey = undefined;
    };

    this.getTotalTime = function () {
      var totalTime = 0;

      for (var i = 0; i < _this.children.length; i++) {
        var item = _this.children[i];
        var itemTime = item.pausedState ? 0 : item.startTime + item.totalTime;

        if (!totalTime) {
          totalTime = itemTime;
        } else {
          totalTime = Math.max(itemTime, totalTime);
        }
      }

      return totalTime;
    };

    this.updateTickerState = function () {
      /**
       * 暂停状态和播放完成状态不记入, 杀掉 ticker;
       */
      if (!_this.children.length || !_this.children.some(function (c) {
        return !(c === null || c === void 0 ? void 0 : c.pausedState) && (!(c === null || c === void 0 ? void 0 : c.reverseState) && c.progressTime < c.totalTime || (c === null || c === void 0 ? void 0 : c.reverseState) && c.progressTime > 0);
      })) {
        _this.killAll(!_this.children.length);
      } else {
        _this.start();
      }
    };

    this.start = function () {
      if (!_this.tickerKey) {
        _this.tickerKey = _ticker.default.add(_this.render);
      }
    };

    this.render = function (_ref) {
      var time = _ref.time,
          _ref$elapsed = _ref.elapsed,
          elapsed = _ref$elapsed === void 0 ? 0 : _ref$elapsed;
      // this.children.forEach(animate => {
      var children = _this.children;
      var length = children.length;

      for (var i = 0; i < length; i++) {
        var animate = children[i];

        if (!animate) {
          continue;
        }

        var startTime = animate.startTime - elapsed;
        var totalTime = animate.startTime + animate.totalTime + elapsed;

        if (time > startTime && time < totalTime && !animate.pausedState) {
          animate.render({
            time: time,
            elapsed: elapsed
          });
        }
      } // });

    };
  }

  (0, _createClass2.default)(Timeline, [{
    key: "totalTime",
    get: function get() {
      return this.getTotalTime();
    }
  }]);
  return Timeline;
}();

var _default = Timeline;
exports.default = _default;