"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Ticker = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _raf = _interopRequireWildcard(require("raf"));

var _utils = require("../utils");

var Ticker = /*#__PURE__*/function () {
  function Ticker() {
    var _this = this;

    (0, _classCallCheck2.default)(this, Ticker);
    this.lagThreshold = 150;
    this.adjustedLag = 33;
    this.emptyTime = 0;
    this.elapsed = 0;
    this.frameFPS = 1000 / 240;
    this.startTime = 0;
    this.prevTime = 0;
    this.useTimeout = false;
    this.lastUpdate = this.startTime;
    this.nextTime = this.frameFPS;
    this.req = void 0;
    this.id = -1;
    this.tweenId = 0;
    this.tickFn = [];
    this.state = 'sleep';
    this.time = 0;
    this.frame = 0;

    this.removeReq = function (id) {
      return _this.useTimeout ? clearTimeout(id) : (0, _raf.cancel)(id);
    };

    this.tick = function () {
      var tickFn = _this.tickFn;

      if (!_this.startTime) {
        _this.startTime = (0, _utils.getTime)() - _this.frameFPS;
        _this.lastUpdate = _this.startTime;
      }

      _this.elapsed = (0, _utils.getTime)() - _this.lastUpdate;

      if (_this.elapsed > _this.lagThreshold) {
        _this.startTime += _this.elapsed - _this.adjustedLag;
      }

      _this.lastUpdate += _this.elapsed;
      _this.time = _this.lastUpdate - _this.startTime;
      var overlap = _this.time - _this.nextTime;

      if (overlap > 0) {
        _this.frame++;
        _this.nextTime += overlap + (overlap >= _this.frameFPS ? 4 : _this.frameFPS - overlap);
        var f = _this.time - _this.prevTime;

        for (var i = 0; i < tickFn.length; i++) {
          tickFn[i].fn({
            time: _this.time,
            elapsed: f < _this.frameFPS ? _this.frameFPS : f
          });
        }
        /* this.tickFn = this.tickFn.filter(item => {
          if (!item.kill) {
            item.fn({ time: this.time, elapsed: this.elapsed });
            return item;
          }
          return false;
        }); */


        _this.prevTime = _this.time;
      }

      if (!_this.tickFn.length) {
        if (!_this.emptyTime) {
          _this.emptyTime = _this.time + 500; // 延时关掉, 用阔值避免跳帧。
        }

        if (_this.time >= _this.emptyTime) {
          _this.emptyTime = 0;

          _this.sleep();

          return;
        }
      }

      if (_this.req) {
        _this.id = _this.req(_this.tick);
      }
    };

    this.wake = function () {
      if (_this.id) {
        _this.sleep();
      }

      _this.req = _this.useTimeout ? function (f) {
        return setTimeout(f, _this.frameFPS);
      } : _raf.default;

      _this.tick();

      _this.state = 'wake';
    };

    this.sleep = function () {
      _this.removeReq(_this.id);

      _this.id = -1;
      _this.req = undefined;
      _this.state = 'sleep';
    };

    this.add = function (fn) {
      var key = "TweenOneTicker_".concat(_this.tweenId);
      _this.tweenId += 1;

      if (_this.tickFn.findIndex(function (c) {
        return c.key === key;
      }) === -1) {
        _this.tickFn.push({
          key: key,
          fn: fn
        });
      }

      _this.emptyTime = 0;

      if (!_this.req) {
        // setTimeout(this.wake);
        _this.wake();
      }

      return key;
    };

    this.clear = function (f) {
      // f: key || fn

      /* const t = Date.now()
      const i = this.tickFn.findIndex((c: any) => c.key === f || c.fn === f);
      // console.log(i);
      if (i !== -1) {
        this.tickFn.splice(i, 1);
      } */
      //const { tickFn } = this;
      // console.log('clear')

      /* for (let i = 0; i < this.tickFn.length; i++) {
         const c = this.tickFn[i];
        if (c.fn == f || c.key === f) {
          c.kill = true;
        }
      }*/
      _this.tickFn = _this.tickFn.filter(function (c) {
        return c.key !== f && c.fn !== f;
      });
    };

    this.timeout = function (fn, time) {
      if (!(typeof fn === 'function')) {
        return console.warn('not function'); // eslint-disable-line
      }

      var startTime = _this.time;

      var timeoutID = _this.add(function () {
        var moment = _this.time - startTime;

        if (moment >= (time || 0)) {
          _this.clear(timeoutID);

          fn();
        }
      });

      return timeoutID;
    };

    this.interval = function (fn, time) {
      if (!(typeof fn === 'function')) {
        console.warn('not function'); // eslint-disable-line

        return null;
      }

      var starTime = _this.time;
      return _this.add(function () {
        var moment = _this.time - starTime;

        if (moment >= (time || 0)) {
          starTime = _this.time;
          fn();
        }
      });
    };
  }

  (0, _createClass2.default)(Ticker, [{
    key: "fps",
    value: function fps(_fps, useTimeout) {
      this.frameFPS = 1000 / (_fps || 240); // 240 赫磁率, 不再用 60；

      this.nextTime = this.time + this.frameFPS;
      this.useTimeout = typeof useTimeout === 'undefined' ? this.useTimeout : useTimeout;

      if (this.useTimeout) {
        this.req = function (f) {
          return setTimeout(f, _fps);
        };
      }
    }
  }]);
  return Ticker;
}();

exports.Ticker = Ticker;
var ticker = new Ticker();
var _default = ticker;
exports.default = _default;