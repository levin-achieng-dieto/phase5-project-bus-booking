"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _ticker = _interopRequireDefault(require("./ticker"));

var _animateElement = _interopRequireDefault(require("./animateElement"));

var _utils = require("../utils");

var AnimateGroup = /*#__PURE__*/(0, _createClass2.default)(function AnimateGroup(_props) {
  var _this = this;

  (0, _classCallCheck2.default)(this, AnimateGroup);
  this.props = void 0;
  this.id = void 0;
  this.children = [];
  this.totalTime = 0;
  this.totalTimeRegion = 0;
  this.childTotalTime = 0;
  this.childRegionTotalTime = 0;
  this.prevMoment = void 0;
  this.progressTime = 0;
  this.progressMoment = -1;
  this.startMoment = 0;
  this.startTime = 0;
  this.repeatNum = 0;
  this.mode = 'onTimelineStart';
  this.pausedState = void 0;
  this.reverseState = void 0;
  this.root = void 0;
  this.parent = void 0;
  this.regionStartTime = 0;
  this.regionEndTime = void 0;
  this.onChangeChild = void 0;
  this.onChangeTimeline = void 0;

  this.init = function () {
    var _this$props = _this.props,
        reverse = _this$props.reverse,
        animation = _this$props.animation,
        moment = _this$props.moment;
    var animateArray = (0, _utils.dataToArray)(animation);

    for (var i = 0; i < animateArray.length; i++) {
      var item = animateArray[i];

      if (item.type === 'set') {
        item.duration = 0;
      } //animateArray.forEach((item: any, i: number) => {


      var animate = new _animateElement.default(item);
      animate.index = i;
      var pos = i ? (0, _utils.getAnimatePos)(item, animateArray[i - 1]) : 0;
      item.appearTo = pos;
      animate.appearTo = pos;

      _this.addChild(animate); //});

    } // 注册


    _this.render({
      time: (reverse ? _this.totalTime : 0) + _this.startTime,
      elapsed: 16.67
    });

    if (!_this.totalTime) {
      _this.render({
        time: (reverse ? _this.totalTime : 0) + _this.startTime,
        elapsed: 16.67
      });
    }

    if (moment) {
      _this.goto(moment);
    } else {
      _this.play();
    }
  };

  this.addChild = function (animate) {
    animate.parent = _this;
    animate.root = _this.root;

    if (_this.children.indexOf(animate) === -1) {
      _this.children.push(animate);

      _this.setTotalTime();
    }
  };

  this.setTotalTime = function () {
    _this.childTotalTime = 0;
    _this.childRegionTotalTime = 0;

    for (var i = 0; i < _this.children.length; i++) {
      var item = _this.children[i];

      if (item.appearTo !== _this.childTotalTime) {
        var itemTime = item.appearTo + item.totalTime;

        if (itemTime > _this.childTotalTime) {
          _this.childTotalTime = itemTime;
          _this.childRegionTotalTime = itemTime;
        }
      } else {
        _this.childTotalTime += item.totalTime;
        _this.childRegionTotalTime += item.totalTime;
      }
    }

    if (_this.regionStartTime) {
      _this.childRegionTotalTime -= _this.regionStartTime;
    }

    if (_this.regionEndTime) {
      _this.childRegionTotalTime = _this.regionEndTime - _this.regionStartTime;
    }

    var _this$props2 = _this.props,
        _this$props2$repeat = _this$props2.repeat,
        repeat = _this$props2$repeat === void 0 ? 0 : _this$props2$repeat,
        _this$props2$repeatDe = _this$props2.repeatDelay,
        repeatDelay = _this$props2$repeatDe === void 0 ? 0 : _this$props2$repeatDe,
        delay = _this$props2.delay;
    _this.totalTime = repeat === -1 ? Number.MAX_VALUE : delay + _this.childTotalTime * (repeat + 1) + repeatDelay * repeat;
    _this.totalTimeRegion = repeat === -1 ? Number.MAX_VALUE : delay + _this.childRegionTotalTime * (repeat + 1) + repeatDelay * repeat;
  };

  this.setStartTimeOrMoment = function (start) {
    _this.startTime = _ticker.default.time;
    _this.startMoment = start || _this.progressMoment;
  };

  this.reRenderCall = function () {
    _this.render({
      time: _this.startTime,
      elapsed: _ticker.default.elapsed || _ticker.default.frameFPS
    });
  };

  this.play = function (v) {
    if (!v) {
      var _this$parent;

      (_this$parent = _this.parent) === null || _this$parent === void 0 ? void 0 : _this$parent.addChild(_this);
    } else {
      var _this$parent2;

      (_this$parent2 = _this.parent) === null || _this$parent2 === void 0 ? void 0 : _this$parent2.updateTickerState();
    }
  };

  this.paused = function () {
    var v = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    _this.pausedState = v;

    _this.setStartTimeOrMoment();

    _this.play(v);
  };

  this.reverse = function (v) {
    _this.reverseState = v;

    _this.setStartTimeOrMoment();

    _this.play(_this.pausedState);
  };

  this.goto = function ($moment, paused) {
    var moment = $moment - _this.regionStartTime;
    _this.startTime = _ticker.default.time;
    _this.startMoment = moment > _this.totalTime ? _this.totalTime : moment;
    _this.progressMoment = _this.startMoment;
    _this.progressTime = moment;

    _this.play(_this.pausedState);

    _this.reRenderCall();

    if (!!paused !== _this.pausedState) {
      _this.paused(paused);
    }
  };

  this.kill = function (index) {
    if (typeof index === 'number') {
      _this.paused();

      delete _this.children[index];

      _this.setTotalTime();

      _this.paused(false);
    } else {
      var _this$parent3;

      _this.children = [];
      (_this$parent3 = _this.parent) === null || _this$parent3 === void 0 ? void 0 : _this$parent3.removeChild(_this);
    }
  };

  this.onChange = function (e) {
    e.timelineMoment = _this.progressMoment;

    _this.onChangeChild(e);
  };

  this.render = function (_ref) {
    var time = _ref.time,
        elapsed = _ref.elapsed;
    var fps = elapsed || _ticker.default.frameFPS || 0;
    var totalTime = _this.totalTime,
        totalTimeRegion = _this.totalTimeRegion,
        childTotalTime = _this.childTotalTime,
        childRegionTotalTime = _this.childRegionTotalTime,
        children = _this.children,
        props = _this.props,
        startTime = _this.startTime,
        reverseState = _this.reverseState,
        pausedState = _this.pausedState,
        startMoment = _this.startMoment,
        onChangeTimeline = _this.onChangeTimeline,
        parent = _this.parent,
        root = _this.root,
        prevMoment = _this.prevMoment,
        regionStartTime = _this.regionStartTime;
    var _props$repeatDelay = props.repeatDelay,
        repeatDelay = _props$repeatDelay === void 0 ? 0 : _props$repeatDelay,
        yoyo = props.yoyo,
        delay = props.delay;
    var _props$repeat = props.repeat,
        repeat = _props$repeat === void 0 ? 0 : _props$repeat;
    repeat = repeat === -1 ? Number.MAX_VALUE : repeat;
    var t = time - startTime - delay;
    var m = reverseState ? startMoment - t : t + startMoment;

    if (m < -fps) {
      return;
    }

    var moment = m < 0 ? 0 : m;
    moment = moment > totalTime ? totalTime : moment;
    moment = startMoment < regionStartTime ? m : moment;
    moment = startMoment > totalTimeRegion ? startMoment : moment;
    var repeatNum = repeat ? Math.floor(moment / (childRegionTotalTime + repeatDelay)) : 0;
    repeatNum = repeat && repeatNum > repeat ? repeat : repeatNum;
    var tweenMoment = moment - (childRegionTotalTime + repeatDelay) * repeatNum;
    var yoyoReverse = !!(yoyo && repeatNum % 2);
    tweenMoment = yoyoReverse ? childRegionTotalTime - tweenMoment : tweenMoment;
    tweenMoment = regionStartTime + tweenMoment;
    var reverse = reverseState ? !yoyoReverse : yoyoReverse;
    _this.mode = 'onTimelineUpdate';

    if (typeof prevMoment !== 'number') {
      _this.mode = 'onTimelineStart';
    }

    if (moment >= totalTimeRegion - delay && typeof prevMoment === 'number') {
      _this.mode = 'onTimelineComplete';
    }

    if (repeatNum !== _this.repeatNum) {
      _this.mode = 'onTimelineRepeat'; // 补帧状态;

      if (moment > childTotalTime * repeatNum && moment < childTotalTime * repeatNum + fps) {
        for (var i = reverse ? 0 : children.length - 1; reverse ? i <= children.length - 1 : i >= 0; reverse ? i++ : i--) {
          var item = children[i]; // console.log('时间轴补帧状态', i);
          // console.log('reverse', reverse);

          if (!reverse) {
            item.prevMoment = undefined;
          }

          item.render({
            moment: reverse ? item.totalTime : 0,
            fps: fps
          });
        }

        onChangeTimeline({
          moment: moment,
          totalTime: totalTime,
          repeat: repeatNum,
          mode: _this.mode,
          targets: root.targets
        });
        _this.mode = 'onTimelineUpdate';
      }
    }

    if (repeat) {
      _this.repeatNum = repeatNum;
    }

    _this.progressMoment = moment;
    _this.prevMoment = moment;
    _this.progressTime = t; // children.forEach(item => {

    for (var _i = 0; _i < children.length; _i++) {
      var _item = children[_i];
      /* if (!item) {
        return;
      } */

      var duration = _item.totalTime + _item.appearTo;
      var tweenTime = tweenMoment >= _item.appearTo - fps && tweenMoment < duration + fps; // 过帧补

      if (_item.mode !== 'onComplete' && tweenMoment > duration + fps && !yoyoReverse && _item.totalTime || typeof _item.mode === 'undefined' && !_item.totalTime // 时间为 0 时的过补条件
      ) {
        // console.log('结束', i, item.totalTime, repeatNum, yoyoReverse);
        _item.render({
          moment: _item.totalTime,
          fps: fps
        });

        _item.prevMoment = undefined;
      }

      if (tweenMoment < _item.appearTo - fps && _item.mode && _item.mode !== 'onStart'
      /* && item.totalTime ||
      (typeof item.mode === 'undefined' && !item.totalTime) */
      ) {
        // console.log('重置', i, item.appearTo, tweenMoment, item.prevMoment, item.mode);
        _item.render({
          moment: _item.appearTo,
          fps: fps,
          silence: true
        });

        _item.prevMoment = undefined;
        _item.mode = undefined;
      }

      if (tweenTime) {
        var _t = tweenMoment < 0 ? 0 : tweenMoment;

        if (tweenMoment > duration && _item.mode === 'onComplete' && !yoyoReverse) {
          return;
        }

        _t = tweenMoment > duration ? duration : tweenMoment; // item.parentBackwards = reverse;

        _item.render({
          moment: _t - _item.appearTo,
          fps: fps
        });

        if (!duration) {
          // console.log('set 状态补帧', i);
          _item.render({
            moment: _item.totalTime,
            fps: fps,
            render: true
          });

          _item.prevMoment = undefined;
        }
      }
    } // });


    onChangeTimeline({
      moment: moment,
      totalTime: totalTime,
      repeat: repeatNum,
      mode: _this.mode,
      targets: root.targets
    });

    if (pausedState || totalTimeRegion && m + delay >= totalTimeRegion && !reverseState || reverseState && m + delay <= 0 || !children.length) {
      parent === null || parent === void 0 ? void 0 : parent.removeChild(_this);
    }
  };

  this.props = _props;
  var _this$props3 = this.props,
      _paused = _this$props3.paused,
      _reverse = _this$props3.reverse;
  this.reverseState = _reverse;
  this.pausedState = _paused;
  this.regionStartTime = _props.regionStartTime || 0;
  this.regionEndTime = _props.regionEndTime;
});
exports.default = AnimateGroup;