"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _utils = require("../utils");

var _styleUtils = require("style-utils");

var _PluginMixins2 = _interopRequireDefault(require("./PluginMixins"));

var angleData = {
  linear: {
    'to top': '0deg',
    'to top right': '45deg',
    'to right top': '45deg',
    'to right': '90deg',
    'to right bottom': '135deg',
    'to bottom right': '135deg',
    'to bottom': '180deg',
    'to bottom left': '225deg',
    'to left bottom': '225deg',
    'to left': '270deg',
    'to left top': '315deg',
    'to top left': '315deg'
  },
  radial: {
    center: '50% 50%',
    top: '50% 0%',
    'top right': '100% 0%',
    'right top': '100% 0%',
    right: '100% 50%',
    'right bottom': '100% 100%',
    'bottom right': '100% 100%',
    bottom: '50% 100%',
    'bottom left': '0% 100%',
    'left bottom': '0% 100%',
    left: '0% 50%',
    'left top': '0% 0%',
    'top left': '0% 0%'
  }
};
var extentKeyWord = ['closest-side', 'closest-corner', 'farthest-side', 'farthest-corner'];

var consoleWarn = function consoleWarn(key, start, to) {
  console.warn("Warning: The gradient ".concat(key, "(").concat(start, " => ").concat(to, ") is different, which has been automatically converted to animation gradient ").concat(key, "(").concat(to, ")."));
}; // background-image functions: https://developer.mozilla.org/en-US/docs/Web/CSS/background-image


var noGradient = function noGradient(type) {
  return type === 'url' || type.indexOf('image') >= 0 || type === 'paint' || type === 'cross-fade' || type === 'element';
};

var GradientsPlugin = /*#__PURE__*/function (_PluginMixins) {
  (0, _inherits2.default)(GradientsPlugin, _PluginMixins);

  var _super = (0, _createSuper2.default)(GradientsPlugin);

  function GradientsPlugin(_value) {
    var _this;

    (0, _classCallCheck2.default)(this, GradientsPlugin);
    _this = _super.call(this, _value, 'backgroundImage');
    _this.value = void 0;
    _this.tweenVars = {};
    _this.vars = [];
    _this.computedStyle = void 0;
    _this.defaultStartVars = [];

    _this.getPosition = function (data) {
      return data.map(function (t) {
        return {
          data: parseFloat(t),
          unit: t.replace(/[^a-z|%]/g, '')
        };
      });
    };

    _this.getAngle = function (type, $angle) {
      var t = type.replace(/-|gradient|repeating]/g, '');
      var extent;
      var shape;
      var angle;
      var position;

      switch (t) {
        case 'linear':
          {
            angle = _this.getPosition((angleData.linear[$angle] || $angle || angleData.linear['to bottom']).split(' '));
            break;
          }

        case 'radial':
          {
            var angleSplit = $angle.split(' ');
            extent = angleSplit.find(function (s) {
              return extentKeyWord.indexOf(s) >= 0;
            }) || extentKeyWord[3];
            shape = angleSplit.find(function (s) {
              return s === 'circle' || s === 'ellipse';
            }) || 'ellipse';
            var req = new RegExp("".concat(extent, "|").concat(shape, "|at"), 'g');
            var p = $angle.replace(req, '').trim();
            position = _this.getPosition((angleData.radial[p] || p || angleData.radial.center).split(' '));
            break;
          }

        case 'conic':
          {
            var _angleSplit = $angle.split('at').map(function (c) {
              return c.trim();
            });

            var n = (_angleSplit[0] || '').split(' ');
            shape = n[0] || 'from';
            angle = _this.getPosition([n[1] || '0deg']);
            position = _this.getPosition((angleData.radial[_angleSplit[1]] || _angleSplit[1] || angleData.radial.center).split(' '));
            break;
          }

        default:
          break;
      }

      return {
        extent: extent,
        shape: shape,
        angle: angle,
        position: position
      };
    };

    _this.valueToIValue = function (value) {
      if (!value) {
        return [];
      }

      var v = value.replace(/\),\s+?(url|radial|conic|linear|repeating|image|element|cross|paint)/, ')#,#$1').split('#,#'); //.match(/[a-z|-]+\(([\s\S]*?)\)/gi) || [];

      return v.map(function (str) {
        var type = str.replace(/([a-z|-]+)\((.*)\)/, '$1').trim();

        if (type === 'url') {
          return {
            type: type,
            values: str
          };
        }

        var data = str.replace(/([a-z|-]+)\((.*)\)/, '$2').replace(/#([0-9a-f]{6}|[0-9a-f]{3})|(rgb[a]?|hsl)+\(\d+\,[\s+]?\d+[\%]?\,[\s+]?\d+[\%]?(\,\d+)?\)/gi, function (e) {
          return e.replace(/\s+/g, '');
        }).replace(/\,([a-z|#|\s+])/g, '#,#$1').split('#,#').map(function (str) {
          return str.trim();
        });
        var a = data[0].match(_utils.colorRegExp) ? '' : data[0];

        if (a) {
          data.splice(0, 1);
        }

        var angle = _this.getAngle(type, a);

        var values = data.map(function (s) {
          var colorAndPos = s.trim().split(/\s+/);
          var color;
          var t = colorAndPos[0].match(_utils.colorRegExp) ? colorAndPos[0] : colorAndPos[0];

          if (t) {
            colorAndPos.splice(0, 1);
            color = (0, _styleUtils.parseColor)(t);
          }

          return {
            color: color,
            positions: colorAndPos.map(function (s) {
              return {
                data: parseFloat(s),
                unit: s.toString().replace(/[^a-z|%]/g, '')
              };
            })
          };
        });
        return {
          type: type,
          angle: angle,
          values: values
        };
      });
    };

    _this.getAnimStart = function () {
      var _tweenVars$key;

      var _assertThisInitialize = (0, _assertThisInitialized2.default)(_this),
          s = _assertThisInitialize.startAt,
          key = _assertThisInitialize.key,
          computedStyle = _assertThisInitialize.computedStyle,
          target = _assertThisInitialize.target,
          vars = _assertThisInitialize.vars,
          tweenVars = _assertThisInitialize.tweenVars;

      var startAt = (0, _objectSpread2.default)({}, s);
      var v = (_tweenVars$key = tweenVars[key]) !== null && _tweenVars$key !== void 0 ? _tweenVars$key : (computedStyle || target)[key];

      if (!v || v === 'none' || v === 'auto') {
        v = '';
      }

      if (!startAt[key]) {
        startAt[key] = v ? _this.valueToIValue(v) : _this.defaultStartVars;
      }

      var maxVarsLength = Math.max(vars.length, startAt[key].length);
      var startData = (maxVarsLength === startAt[key].length ? startAt[key] : vars).map(function (_, i) {
        var _item$angle, _start$angle;

        var start = startAt[key][i] || _this.defaultStartVars[i];
        var item = vars[i] || start;

        if (!start || start.type !== item.type) {
          if (start.type !== item.type) {
            consoleWarn('type', start.type, item.type);
          }

          start = _this.defaultStartVars[i];
        }

        if (noGradient(item.type) || typeof item.values === 'string' || typeof start.values === 'string') {
          return (0, _objectSpread2.default)({}, item);
        }

        if (((_item$angle = item.angle) === null || _item$angle === void 0 ? void 0 : _item$angle.extent) !== ((_start$angle = start.angle) === null || _start$angle === void 0 ? void 0 : _start$angle.extent)) {
          var _start$angle2, _item$angle2;

          consoleWarn('extent keyword', (_start$angle2 = start.angle) === null || _start$angle2 === void 0 ? void 0 : _start$angle2.extent, (_item$angle2 = item.angle) === null || _item$angle2 === void 0 ? void 0 : _item$angle2.extent);
        }

        var maxLength = Math.max(start.values.length, item.values.length);
        var values = maxLength === start.values.length ? start.values : item.values;
        start.values = values.map(function (_, j) {
          var sValue = start.values[j];
          var aItem = item.values[j] || sValue;
          return (0, _objectSpread2.default)((0, _objectSpread2.default)({}, sValue), {}, {
            positions: (aItem || sValue).positions.map(function ($bItem, jj) {
              var sPos = sValue ? sValue.positions[jj] || sValue.positions[sValue.positions.length - 1] : aItem.positions[aItem.positions.length - 1];
              var bItem = $bItem || sPos;

              if (!sPos && sValue && start.values.length) {
                sPos = {
                  data: 100 / (start.values.length - 1) * j,
                  unit: '%'
                };
              }

              if (bItem.unit !== sPos.unit) {
                consoleWarn('units', sPos.unit, bItem.unit);
              }

              return {
                data: sPos.data,
                unit: bItem.unit
              };
            })
          });
        });
        return start;
      });
      _this.start = startData;
      return _this.start;
    };

    _this.render = function (ratio) {
      var value = '';
      var maxVarsLength = Math.max(_this.vars.length, _this.start.length);
      (maxVarsLength === _this.vars.length ? _this.vars : _this.start).forEach(function (_, i) {
        var start = _this.start[i];
        var item = _this.vars[i] || start;

        if (noGradient(item.type) || typeof item.values === 'string' || !item.angle) {
          value += "".concat(value ? ',' : '', " ").concat(item.values).trim();
          return;
        }

        var maxLength = Math.max(start.values.length, item.values.length);
        var values = (maxLength === start.values.length ? start.values : item.values).map(function (_, i) {
          var startItem = start.values[i];
          var cItem = item.values[i];

          if (!cItem) {
            cItem = startItem;
          }

          var startColor = startItem.color;
          var startPos = startItem.positions;

          if (!startColor && cItem.color) {
            startColor = (0, _toConsumableArray2.default)(cItem.color); // startColor[3] = 0;
          }

          if (!startPos) {
            startPos = cItem.positions.map(function (c) {
              return (0, _objectSpread2.default)({}, c);
            });
          }

          var color = cItem.color ? cItem.color.map(function (n, j) {
            return (0, _utils.getValue)(startColor[j], n, ratio);
          }) : cItem.color;
          var positions = cItem.positions.map(function (n, j) {
            return "".concat((0, _utils.getValue)(startPos[j].data, n.data, ratio)).concat(n.unit);
          }).join(' ');
          return "".concat(color ? (0, _styleUtils.getColor)(color) : color || '', " ").concat(positions).trim();
        });
        var angle = item.angle;
        var angleAngle = angle.angle && angle.angle.map(function (n, j) {
          return "".concat((0, _utils.getValue)(start.angle.angle[j].data, n.data, ratio)).concat(n.unit);
        }).join(' ');
        var anglePosition = angle.position && angle.position.map(function (n, j) {
          return "".concat((0, _utils.getValue)(start.angle.position[j].data, n.data, ratio)).concat(n.unit);
        }).join(' ');
        var newAngle = "".concat(angle.extent || '', " ").concat(angle.shape || '', " ").concat(angleAngle || '', " ").concat(anglePosition ? "at ".concat(anglePosition) : '').trim();
        value += "".concat(value ? ',' : '', " ").concat(item.type, "(").concat(newAngle ? "".concat(newAngle, ",") : '').concat(values.join(','), ")").trim();
      });
      return value;
    };

    _this.value = _value;
    _this.vars = _this.valueToIValue(_value);
    _this.defaultStartVars = _this.vars.map(function (item) {
      if (noGradient(item.type) || typeof item.values === 'string') {
        return (0, _objectSpread2.default)({}, item);
      }

      return (0, _objectSpread2.default)((0, _objectSpread2.default)({}, item), {}, {
        values: item.values.map(function (c) {
          var color;

          if (c.color && typeof c.color !== 'string') {
            color = (0, _toConsumableArray2.default)(c.color);
            color[3] = 0;
          } else {
            color = c.color;
          }

          return {
            color: color,
            positions: (0, _toConsumableArray2.default)(c.positions)
          };
        })
      });
    });
    return _this;
  }

  return (0, _createClass2.default)(GradientsPlugin);
}(_PluginMixins2.default);

exports.default = GradientsPlugin;
GradientsPlugin.className = 'GradientsPlugin';